element Vertex end
element Edge end
const edges : edgeset{Edge}(Vertex, Vertex) = load(argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const parent : vector{Vertex}(intx) = vertices.getProperty();
const frontier : vector{Vertex}(int);
const newTuple : vector{Vertex}(int);
const round_id : int;

func reset(v : Vertex)
    parent[v] = 2147483647-1;
    % 0x7FFF_FFFF - 1
end

func tryvisit(srcProp : intx)->update : intx
    update = srcProp+1;
end

func isActive(update : intx) -> active : bool
    active = (update & 2147483648);
end

func reduce(ori : intx, update : intx) -> newState : intx
    if (ori > update) 
        newState = update;
    else
        newState = ori;
    end
end

func v_update(newState : intx, srcProp : intx, v : Vertex) -> newProp : intx
    newTuple[v] = newState;
    if (newState > 0 and srcProp == -1) 
        newProp = newState;
        frontier[v] = 1;
    else
        newProp = -1;
        frontier[v] = 0;
    end
end    

func getSize() -> size : int
    var num : int = 0;
    for i in 0:edges.getVertices()
        if (frontier[i]==1)
           num += 1;
        end
    end
    size = num;
end

func printTuple()
    for i in 0:vertices.size()
        println newTuple[i];
    end
end

func main()
    vertices.init(reset);
    parent[1] = 1;
    frontier[1] = 1;
    edges.migrate(true);
    var frontier_size : int = 1;
    round_id = 0;
    while (frontier_size != 0)
        startTimer();
        #s1# edges.iter(round_id).scatter(tryvisit).filter(isActive).gather(reduce);
        vertices.apply(v_update);
        var elapsed_time : double = stopTimer();
        print "elapsed time: ";
        println elapsed_time;
        frontier.update();
        frontier_size = getSize();
        print "frontier size: ";
        println frontier_size;
        newTuple.update();
        printTuple();
        round_id = round_id+1;
    end
end
parameter:
    program->configUnsignedProp("s1", true);