element Vertex end
element Edge end
const edges : edgeset{Edge}(Vertex, Vertex) = load(argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const prop : vector{Vertex}(intx);
const frontier : vector{Vertex}(int);
func reset(v : Vertex)
    prop[v]=0;
    frontier[v]=0;
    prop[1]=1;
end
func ScatterFunc(src : Vertex) -> update : intx
    update = prop[src];
end
func ActiveFunc(update : intx) -> flag : bool
    flag = (update==1);
end
func GatherFunc(dst : Vertex, update : intx) -> tprop : intx
    if (prop[dst] == 0) and (update == 1)
        tprop = update;
    else 
        tprop = prop[dst];
    end
end
func ApplyFunc(tprop : intx, v : Vertex) -> newprop : intx
    if ((tprop == 1) and (prop[v] == 0))
        newprop = tprop;
        frontier[v] = 1;
    else
        newprop = prop[v];
        frontier[v] = 0;
    end
end
func getSize() -> size : int
    var num = 0;
    for i in 0:edges.getVertices()
        if (frontier[i]==1)
           num += 1;
        end
    end
    size = num;
end
func main()
    vertices.init(reset);
    int activeVertices = 1;
    while(activeVertices != 0)
        startTimer();
        #s1# edges.gsActive(ScatterFunc, ActiveFunc, GatherFunc);
        vertices.apply(ApplyFunc);
        var elapsed_time : float = stopTimer();
        activeVertices = getSize();
        print "elapsed time: ";
        println elapsed_time;
        
    end
end

schedule:
    program->configUnsignedProp("s1", true)->configSubpartitionPlan("s1", "estimator");
