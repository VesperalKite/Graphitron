element Vertex end
element Edge end
const edges : edgeset{Edge}(Vertex, Vertex, int) = load(argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const dis : vector{Vertex}(int);
const frontier : vector{Vertex}(int);
const map_w : vector{Edge}(int);

func reset(v : Vertex)
    dis[v] = 2147483647;
    frontier[v] = 0;
end

func calc(v : Vertex)
    for e in v.getOutEdges()
        var newdis : int = dis[v] + e.weight();
        var ngh : Vertex = e.dst();
        if newdis < dis[ngh]
            frontier[ngh] = 1;
            dis[ngh] = newdis;
        end
    end
end

func getSize() -> size : int
    var num : int = 0;
    for i in 0:edges.getVertices()
        if (frontier[i]==1)
           num += 1;
        end
    end
    size = num;
end

func res_print()
    for i in 0:edges.getVertices()
        if dis[i] == 2147483647
            print "infinite";
        else
            print dis[i];
        end
        print " ";
    end
    println "";
end

func frontier_reset(v : Vertex)
    frontier[v] = 0;
end

func main()
    vertices.init(reset);
    map_w[0] = 4;
    map_w[1] = 2;
    map_w[2] = 1;
    map_w[3] = 1;
    map_w[4] = 4;
    dis[1] = 0;
    frontier[1] = 1;
    edges.partition();
    var frontier_size : int = 1;
    while (frontier_size != 0)
        startTimer();
        vertices.process(frontier_reset);
        vertices.process(calc);
        var elapsed_time : double = stopTimer();
        dis.update();
        res_print();
        print "elapsed time: ";
        println elapsed_time;
        frontier.update();
        frontier_size = getSize();
    end
end