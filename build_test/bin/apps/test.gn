element Vertex end
element Edge end
const edges : edgeset{Edge}(Vertex, Vertex) = load(argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const prop : vector{Vertex}(intx) = vertices.getProperty();
const eprop : vector{Edge}(intx) = edges.getProperty();
const outDeg : vector{Vertex}(intx) = vertices.getOutDegrees();
const frontier : vector{Vertex}(int);
const reslut : vector{Vertex}(double);
const rank_t : vector(int) = {1, 0, 2};
const vertexnum : int = vertices.size();
const beta_score : double = 1.0 / vertices.size();
func reset(v : Vertex)
    prop[v]=0;
    prop[3251]=1;
    frontier[v]=0;
    reslut[v] = 0;
end
func e_reset(e : Edge)
    eprop[e]=1;
end
func ScatterFunc(srcProp : intx) -> update : intx
    update = srcProp;
end
func ActiveFunc(update : intx) -> flag : bool
    flag = (update==1);
end
func GatherFunc(ori : intx, update : intx) -> tprop : intx
    if (ori < update) and (update == 1)
        tprop = update;
    else 
        tprop = ori;
    end
end
func ApplyFunc(tprop : intx, srcProp : intx, v : Vertex) -> newprop : intx
    if ((tprop == 1) and (srcProp == 0))
        frontier[v] = 1;
        newprop = tprop;
    else
        frontier[v] = 0;
        newprop = srcProp;
    end
    reslut[0] = vertexnum;
    reslut[1] = beta_score;
end
func getSize() -> size : int
    var num : int = 0;
    for i in 0:edges.getVertices()
        if (frontier[i]==1)
           num += 1;
        end
    end
    size = num;
end

func main()
    vertices.init(reset);
    edges.init(e_reset);
    edges.partition();
    var frontier_size : int = 1;
    var iteration : int = 0;
    while (frontier_size != 0)
        print "[EPOCH] ";
        println iteration;
        startTimer();
        #s1# edges.iter(iteration).gs(ScatterFunc, ActiveFunc, GatherFunc);
        vertices.apply(ApplyFunc);
        var elapsed_time : double = stopTimer();
        print "elapsed time: ";
        println elapsed_time;
        frontier.update();
        reslut.update();
        frontier_size = getSize();
        print "frontier size: ";
        println frontier_size;
        var vertexnum : int = reslut[0];
        var beta : double = reslut[1];
        println vertexnum;
        println beta;
        iteration += 1;
    end
end

parameter:
    program->configUnsignedProp("s1", true)->configSubpartitionPlan("s1", "estimator");
