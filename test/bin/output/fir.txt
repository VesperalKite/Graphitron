fir :
-------------------------
-There have a element.
-Name: Vertex
element Vertex end
-------------------------

-------------------------
-There have a element.
-Name: Edge
element Edge end
-------------------------

const edges : edgeset{Edge}(Vertex, Vertex)  = edgeset_load (argv[1]) ;
const vertices : vertexset{Vertex} = edges.getVertices();
const prop : tensor{Vertex}(intx);
-------------------------
-There have a function.
-Name: reset
-Have a return ? [No]
func reset(v : Vertex) 
  prop[v] = 0;
end
-------------------------

-------------------------
-There have a function.
-Name: ScatterFunc
-Have a return ? [Yes]
func ScatterFunc(src : Vertex) -> (update : intx)
  update = prop[src];
end
-------------------------

-------------------------
-There have a function.
-Name: ActiveFunc
-Have a return ? [Yes]
func ActiveFunc(update : intx) -> (flag : bool)
  flag = (update) == (1);
end
-------------------------

-------------------------
-There have a function.
-Name: GatherFunc
-Have a return ? [Yes]
func GatherFunc(ori : intx, update : intx) -> (tprop : intx)
  if ((ori) < (update)) and ((update) == (1))
    tprop = update;
  else
    tprop = ori;

  end
end
-------------------------

-------------------------
-There have a function.
-Name: ApplyFunc
-Have a return ? [Yes]
func ApplyFunc(tprop : intx, v : Vertex) -> (newprop : intx)
  if ((tprop) == (1)) and ((prop[v]) == (0))
    newprop = tprop;
    Active(v);
  else
    newprop = prop[v];
    InActive(v);

  end
end
-------------------------

-------------------------
-There have a function.
-Name: main
-Have a return ? [No]
func main() 
  vertices.INIT(reset);
  prop[1] = 1;
  for tail in 0 : 10
    startTimer();
     # s1 # s1: edges.GSACTIVE(ScatterFunc,ActiveFunc,GatherFunc);
    vertices.APPLY(ApplyFunc);
    var elapsed_time : float = stopTimer();
    print elapsed time: ;
    println elapsed_time;
    fpgaTimePrint();
  end
end
-------------------------


